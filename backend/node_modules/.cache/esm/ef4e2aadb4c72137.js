let request,mongoose,expect,App;_b4c‍.w("supertest",[["default",["request"],function(v){request=v}]]);_b4c‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_b4c‍.w("chai",[["expect",["expect"],function(v){expect=v}]]);_b4c‍.w("../server.js",[["default",["App"],function(v){App=v}]]);



let data;
let id;
const url = process.env.ATLAS_URI;
describe("Sandwich API endpoint tests", function () {
    //open database
  beforeAll(function (done) {
    mongoose.connect(
      url,
      { useNewUrlParser: true, useFindAndModify: false },
      function () {
        mongoose.connection.db.dropDatabase(function () {
          done();
        });
      }
    );
  });

  it("add a category", function (done) {
    data = {
      name: 'İçecekler',
    };
    const res = request(App).post("/categories/add").send(data);
    res.expect(200).end(function (err, res) {
      if (err) {
        return done(err);
      }
      expect(res.body).to.equal("Category added!");
      done();
    });
  });
  it("gets all categories", function(done) {
    const res = request(App)
    .get("categories/")
    res.expect(200)
    .end(function(err, res) {
      if (err) {
        return done(err)
      }
      id = res.body[0]._id;
      expect(res.body.length).to.equal(1)
      expect(res.body[0].name).to.equal('İçecekler')
      done()
    })
  })
  //After all tests are finished drop database and close connection
  afterAll(function(done){
    mongoose.connection.db.dropDatabase(function(){
      mongoose.connection.close(done);
    });
  });
});
