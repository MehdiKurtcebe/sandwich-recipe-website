{"version":3,"sources":["components/HomePage/Header.jsx","http-common.js","services/RecipieService.js","components/HomePage/Recipies.jsx","components/HomePage/Main.jsx","components/HomePage/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","collapsed","toggleNavbar","socialLinks","react_default","a","createElement","reactstrap_es","color","dark","isOpen","navbar","sm","md","className","offset","href","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","class","src","alt","loading","style","onClick","axios","create","baseURL","headers","Content-type","RecipieService","http","get","Album","album","_useState","useState","_useState2","Object","slicedToArray","recipies","setRecipies","_useState3","_useState4","_useState5","_useState6","useEffect","retrieveRecipies","RecipieDataService","then","response","data","console","log","catch","e","slice","map","recipie","index","key","top","imgURL","name","variant","size","block","Main","role","addonType","Recipies","Footer","props","Example","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","state","setState","HomePage_Header","HomePage_Main","HomePage_Footer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","App_Example","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8074bf06.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    Col,\r\n    Collapse,\r\n    Container,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    NavLink,\r\n    Row\r\n} from 'reactstrap';\r\n\r\nconst Header = ({ collapsed, toggleNavbar, socialLinks }) => {\r\n    return (\r\n        <header>\r\n            <Navbar color=\"dark\" dark>\r\n                <Container>\r\n                    <Collapse isOpen={!collapsed} navbar>\r\n                        <Row>\r\n                            <Col sm=\"8\" md=\"7\" className=\"py-4\">\r\n                                <h4 className=\"text-white\">Sandwich</h4>\r\n                                <p className=\"text-muted\">\r\n                                    Welcome to Sandwich Recipe Website Project!\r\n                                </p>\r\n                            </Col>\r\n                            <Col sm=\"4\" md={{ offset: 1 }} className=\"py-4\">\r\n                                <h4 className=\"text-white\">Contact</h4>\r\n                                <p className=\"text-white\">\r\n                                    Dissapointer Group INC.\r\n                                </p>\r\n                            </Col>\r\n                        </Row>\r\n                    </Collapse>\r\n                    <NavbarBrand\r\n                        href=\"/\"\r\n                        className=\"d-flex align-items-center mr-auto\"\r\n                    >\r\n                        <svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"20\"\r\n                            height=\"20\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            stroke=\"currentColor\"\r\n                            strokeWidth=\"2\"\r\n                            strokeLinecap=\"round\"\r\n                            strokeLinejoin=\"round\"\r\n                            className=\"mr-2\"\r\n                        />\r\n                        <a class=\"navbar-brand\" href=\"#\">\r\n                            <img\r\n                                src=\"https://i.ibb.co/12pWKWZ/Sandwich2.png\"\r\n                                width=\"70\"\r\n                                height=\"50\"\r\n                                class=\"d-inline-block align-top\"\r\n                                alt=\"\"\r\n                                loading=\"lazy\"\r\n                            />\r\n                        </a>\r\n                        <NavLink style={{color: 'white'}} href=\"#\">Home</NavLink>\r\n                        <NavLink style={{color: 'white'}} href=\"#\">All Recipies</NavLink>\r\n                    </NavbarBrand>\r\n                    <NavbarToggler onClick={toggleNavbar} className=\"mr-2\" />\r\n                </Container>\r\n            </Navbar>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import axios from \"axios\";\r\nexport default axios.create({\r\n    baseURL: \"http://localhost:5000/\",\r\n    headers: {\r\n      \"Content-type\": \"application/json\"\r\n    }\r\n  });","import http from \"../http-common\";\r\n\r\nconst getAll = () => {\r\n  return http.get(\"/recipes\");\r\n};\r\n\r\nconst get = id => {\r\n  return http.get(`/recipes/${id}`);\r\n};\r\n\r\nconst create = data => {\r\n  return http.post(\"/recipes\", data);\r\n};\r\n\r\nconst update = (id, data) => {\r\n  return http.put(`/recipes/${id}`, data);\r\n};\r\n\r\nconst remove = id => {\r\n  return http.delete(`/recipes/${id}`);\r\n};\r\n\r\nconst removeAll = () => {\r\n  return http.delete(`/recipes`);\r\n};\r\n\r\nconst findByTitle = title => {\r\n  return http.get(`/recipes?title=${title}`);\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  get,\r\n  create,\r\n  update,\r\n  remove,\r\n  removeAll,\r\n  findByTitle\r\n};","import React, { useState, useEffect } from 'react';\r\nimport RecipieDataService from '../../services/RecipieService';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n    Button,\r\n    // ButtonGroup,\r\n    Card,\r\n    CardImg,\r\n    CardText,\r\n    CardBody,\r\n    Col,\r\n    Container,\r\n    Row\r\n} from 'reactstrap';\r\n\r\nconst Album = ({ album }) => {\r\n    const [recipies, setRecipies] = useState([]);\r\n    const [currentRecipie, setCurrentRecipie] = useState(null);\r\n    const [currentIndex, setCurrentIndex] = useState(-1);\r\n\r\n    useEffect(() => {\r\n        retrieveRecipies();\r\n    }, []);\r\n\r\n    const retrieveRecipies = () => {\r\n        RecipieDataService.getAll()\r\n            .then(response => {\r\n                setRecipies(response.data);\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    };\r\n\r\n    const refreshList = () => {\r\n        retrieveRecipies();\r\n        setCurrentRecipie(null);\r\n        setCurrentIndex(-1);\r\n    };\r\n\r\n    const setActiveRecipie = (Recipie, index) => {\r\n        setCurrentRecipie(Recipie);\r\n        setCurrentIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"recipies py-5 bg-light\">\r\n            <Container>\r\n                <Row>\r\n                    {recipies.slice(0, 6).map((recipie, index) => {\r\n                        return (\r\n                            <Col md=\"4\" key={index}>\r\n                                <Card className=\"mb-4 box-shadow\">\r\n                                    <CardImg\r\n                                        top\r\n                                        width=\"180\" \r\n                                        height=\"250\"\r\n                                        src={recipie.imgURL}\r\n                                    />\r\n                                    <CardBody className=\"text-center\">\r\n                                        {/*THERE WILL AN item OBJECT IN DATABASE AND IT WILL BE PRINTED IN HERE*/}\r\n                                        <CardText><strong >{recipie.name}</strong></CardText>\r\n\r\n                                        <div className=\"d-flex justify-content-between align-items-center\">\r\n                                            <Button\r\n                                                href=\"#\"\r\n                                                variant = \"outline-dark\"\r\n                                                color=\"secondary\"\r\n                                                size=\"lg\"\r\n                                                block\r\n                                            >\r\n                                            <strong>Show</strong>\r\n                                            </Button>\r\n                                        </div>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n                        );\r\n                    })}\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Album;\r\n","import React from 'react';\r\nimport Album from './Recipies';\r\nimport { Button, Container, Jumbotron, InputGroup, InputGroupAddon, Input } from 'reactstrap';\r\n\r\nconst Main = ({ album }) => {\r\n    return (\r\n        <main role=\"main\">\r\n            <Jumbotron className=\"text-center\">\r\n                <Container>\r\n                    <h1 className=\"jumbotron-heading\">Sandwich Search </h1>\r\n                    <p className=\"lead text-muted\">\r\n                        Enter ingredients you want to search for\r\n                    </p>\r\n                    <p>\r\n                        <InputGroup>\r\n                            <InputGroupAddon addonType=\"prepend\"><Button>Search</Button></InputGroupAddon>\r\n                            <Input />\r\n                        </InputGroup>\r\n                        {/* <Button color=\"primary\" className=\"mx-1 my-2\">\r\n                            Main call to action\r\n                        </Button>\r\n                        <Button color=\"secondary\" className=\"my-2\">\r\n                            Secondary action\r\n                        </Button> */}\r\n                    </p>\r\n                </Container>\r\n            </Jumbotron>\r\n            <Album album={album} />\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport { Container } from 'reactstrap';\r\n\r\nconst Footer = (props) => {\r\n    return (\r\n        <footer className=\"text-muted\">\r\n            <Container>\r\n                <p className=\"float-right\">\r\n                    <a href=\"#\">Back to top</a>\r\n                </p>\r\n                <p>Copyright to &copy; Sandwich</p>\r\n                <p>\r\n                    Project's Github available on: \r\n                    <a href=\"https://github.com/akifkartal03/sandwich-recipe-app\">\r\n                         Visit our github page\r\n                    </a>\r\n                    .\r\n                </p>\r\n            </Container>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Header from './components/HomePage/Header';\r\nimport Main from './components/HomePage/Main';\r\nimport Footer from './components/HomePage/Footer';\r\n\r\nimport './App.css';\r\n\r\nexport default class Example extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toggleNavbar = this.toggleNavbar.bind(this);\r\n        this.state = {\r\n            collapsed: true,\r\n        };\r\n    }\r\n\r\n    toggleNavbar() {\r\n        this.setState({\r\n            collapsed: !this.state.collapsed,\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header\r\n                    collapsed={this.state.collapsed}\r\n                    toggleNavbar={this.toggleNavbar}\r\n                />\r\n                <Main album={this.state.album} />\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}